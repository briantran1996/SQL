# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 


#Creating the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name,track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

#1. Which artist appears most frequently in the top 50?
SELECT artist_name, COUNT(*) AS track_count
FROM spotifydata
GROUP BY artist_name
ORDER BY track_count DESC
LIMIT 1;

#2. What are the top 5 most popular tracks?
SELECT track_name, artist_name, popularity
FROM spotifydata
ORDER BY popularity DESC
LIMIT 5;

#3. What is the average danceability and energy of tracks by "Olivia Rodrigo"?
SELECT AVG(danceability) AS avg_danceability, AVG(energy) AS avg_energy
FROM spotifydata
WHERE artist_name = 'Olivia Rodrigo';

#4. Which tracks have a valence higher than 0.8 (very positive)?
SELECT track_name, artist_name, valence
FROM spotifydata
WHERE valence > 0.8
ORDER BY valence DESC;

#5. What is the distribution of tracks by musical key?
SELECT song_key, COUNT(*) AS num_tracks
FROM spotify_top50
GROUP BY song_key
ORDER BY num_tracks DESC;




